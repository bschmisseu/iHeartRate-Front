{"ast":null,"code":"var _jsxFileName = \"/Users/bryceschmisseur/Desktop/IHeartRate/frontend/src/components/dashboard/Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  id: 'bpm',\n  label: 'Beats per Minute',\n  align: 'center'\n}, {\n  id: 'date',\n  label: 'Date/Time Recorded',\n  minWidth: 170,\n  align: 'center',\n  format: value => value.toLocaleString('en-US')\n}];\n\nfunction createData(bpm, date) {\n  return {\n    bpm,\n    date\n  };\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: 465,\n    minHeight: 465\n  }\n});\nexport default function StickyHeadTable(props) {\n  _s();\n\n  const classes = useStyles();\n  const [rows, setRows] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  useEffect(() => {\n    let arr = props.rateList;\n    let data = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      data.push(createData(arr[i].bpm, arr[i].data.toLocaleString()));\n    }\n\n    setRows(data);\n  }, []);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                minWidth: column.minWidth\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = row[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: column.format && typeof value === 'number' ? column.format(value) : value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 23\n                }, this);\n              })\n            }, row.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [10, 25, 100],\n      component: \"div\",\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StickyHeadTable, \"8ivSL8GvZRkNYy4bmBivp0oHRnE=\", false, function () {\n  return [useStyles];\n});\n\n_c = StickyHeadTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"StickyHeadTable\");","map":{"version":3,"sources":["/Users/bryceschmisseur/Desktop/IHeartRate/frontend/src/components/dashboard/Table.js"],"names":["React","useEffect","makeStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","columns","id","label","align","minWidth","format","value","toLocaleString","createData","bpm","date","useStyles","root","width","container","maxHeight","minHeight","StickyHeadTable","props","classes","rows","setRows","useState","page","setPage","rowsPerPage","setRowsPerPage","arr","rateList","data","i","length","push","handleChangePage","event","newPage","handleChangeRowsPerPage","target","map","column","slice","row","code"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst columns = [\n  { \n    id: 'bpm', \n    label: 'Beats per Minute',\n    align: 'center' \n    },\n  {\n    id: 'date',\n    label: 'Date/Time Recorded',\n    minWidth: 170,\n    align: 'center',\n    format: (value) => value.toLocaleString('en-US'),\n  },\n];\n\nfunction createData(bpm, date) {\n  return { bpm, date };\n}\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n\n  },\n  container: {\n    maxHeight: 465,\n    minHeight: 465,\n  },\n});\n\nexport default function StickyHeadTable(props) {\n  const classes = useStyles();\n  const [rows, setRows] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  useEffect(() => {\n    let arr = props.rateList;\n    let data = [];\n    for(let i = 0; i < arr.length; i++){\n      data.push(createData(arr[i].bpm, arr[i].data.toLocaleString()));\n    }\n    setRows(data);\n  }, []);\n\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell\n                  key={column.id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? column.format(value) : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 25, 100]}\n        component=\"div\"\n        count={rows.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}"]},"metadata":{},"sourceType":"module"}